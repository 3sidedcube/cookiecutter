apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nestjs-template
  title: Nest.js Template
  description: Build a NestJS API with options for GraphQL.
spec:
  owner: group:3sidedcube/backend
  type: service
  parameters:
    - title: Config
      properties:
        name:
          title: Name
          type: string
          description: This will be the name of the repository.
        description:
          title: Description
          type: string
          description: Some information to outline what this repository is.
        createAWSAccount:
          title: Create AWS Account
          type: boolean
          description: Create an initial test AWS account to sandbox this project.
      dependencies:
        createAWSAccount:
          oneOf:
            - properties:
                createAWSAccount:
                  const: false
            - properties:
                createAWSAccount:
                  const: true
                client:
                  title: Client
                  type: string
                  description: The name of the client used for AWS tags.
                project:
                  title: Project
                  type: string
                  description: The name of the project used for AWS tags.
                email:
                  title: Email
                  type: string
                  description: The email used for the AWS account.
                region:
                  title: Region
                  type: string
                  description: The AWS region to deploy the service in.
              required:
                - client
                - project
                - email
                - region
      required:
        - name
        - description
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        cookiecutterCompat: true
        copyWithoutTemplating:
          - .github/**/*
        url: ../common/base
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          entity_type: Component
          component_type: service
          team: backend

    - id: fetch-nestjs-base
      name: Fetch Nest.js Base
      action: fetch:template
      input:
        cookiecutterCompat: true
        url: ./skeleton/base
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}

    - id: create-aws-account
      name: Create AWS Account
      action: aws:organization:create-account
      if: ${{ parameters.createAWSAccount }}
      input:
        client: ${{ parameters.client }}
        project: ${{ parameters.project }}
        environment: test
        email: ${{ parameters.email }}

    - id: fetch-argocd-manifest
      name: Fetch ArgoCD manifest
      action: fetch:template
      if: ${{ parameters.createAWSAccount }}
      input:
        cookiecutterCompat: true
        url: ../common/argocd
        targetPath: ./.platform/argocd
        values:
          accountID: ${{ steps['create-aws-account'].output.accountID }}
          client: ${{ parameters.client }}
          project: ${{ parameters.project }}
          region: ${{ parameters.region }}

    - id: create-repo
      name: Create repo
      action: publish:github
      input:
        allowMergeCommit: false
        allowRebaseMerge: false
        description: ${{ parameters.description }}
        defaultBranch: main
        deleteBranchOnMerge: true
        hasWiki: false
        hasIssues: false
        protectDefaultBranch: false
        repoUrl: github.com?owner=3sidedcube&repo=${{ parameters.name }}
        repoVariables:
          BACKSTAGE_ENTITY: default/${{ parameters.entity_type }}/${{ parameters.name }}
        repoVisibility: private

    - id: register-entity
      name: Register entity
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['create-repo'].output.repoContentsUrl }}
        catalogInfoPath: /.platform/backstage/catalog-info.yaml

    - id: create-argocd-application
      name: Create ArgoCD application
      action: arogcd:application:create
      if: ${{ parameters.createAWSAccount }}
      input:
        client: ${{ parameters.client }}
        project: ${{ parameters.project }}
        environment: ${{ parameters.environment }}
        repoURL: ${{ steps['create-repo'].output.repoContentsUrl }}

  output:
    links:
      - title: Repository
        url: ${{ steps['create-repo'].output.remoteUrl }}
